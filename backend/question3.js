// Question 3: MongoDB Aggregation Consider a MongoDB collection named sales with documents
// structured as follows:

// json:

// {
//   "_id": ObjectId(""),
//   "date": ISODate("2024-06-15T00:00:00Z"),
//   "store": "Store A",
//   "items": [
//     {
//       "name": "Item 1",
//       "quantity": 5,
//       "price": 100
//     },
//     {
//       "name": "Item 2",
//       "quantity": 15,
//       "price": 200
//     }
//   ]
// }

// Your task is to write an aggregation pipeline to calculate the total revenue generated by each store
// for each month, along with the average price of items sold. The result should be sorted first by store
// and then by month (in ascending order).
// The expected output should be something like this:
// json:

// [
//     {
//         "store": "Store A",
//         "month": "2024-06",
//         "totalRevenue": 230.0,
//         "averagePrice": 15.0
//     },
//     {
//         "store": "Store B",
//         "month": "2024-06",
//         "totalRevenue": 150.0,
//         "averagePrice": 12.5
//     }
// ]


// solution

db.sales.aggregate([
  {
    $unwind: "$items"
  },
  {
    $group: {
      _id: {
        store: "$store",
        month: { $dateToString: { format: "%Y-%m", date: "$date" } }
      },
      totalRevenue: { $sum: { $multiply: ["$items.quantity", "$items.price"] } },
      totalItems: { $sum: "$items.quantity" }, // Sum of all item quantities
      totalPrice: { $sum: "$items.price" } // Sum of all item prices
    }
  },
  {
    $project: {
      _id: 0,
      store: "$_id.store",
      month: "$_id.month",
      totalRevenue: 1,
      averagePrice: { $divide: ["$totalPrice", "$totalItems"] } // Compute the average price per item
    }
  },
  {
    $sort: { store: 1, month: 1 }
  }
]);

//output
[
  {
    "store": "Store A",
    "month": "2024-06",
    "totalRevenue": 3500,
    "averagePrice": 150
  },
  {
    "store": "Store B",
    "month": "2024-06",
    "totalRevenue": 2500,
    "averagePrice": 125
  }
]
